{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","components/Profile.js","utils/history.js","components/PrivateRoute.js","views/ExternalApi.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","to","Profile","loading","user","src","picture","alt","name","email","user_id","JSON","stringify","createBrowserHistory","PrivateRoute","Component","component","path","rest","useEffect","a","appState","targetUrl","fn","render","props","ExternalApi","useState","showResult","setShowResult","apiMessage","setApiMessage","getTokenSilently","callApi","token","fetch","headers","Authorization","response","json","responseData","console","error","App","className","exact","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","Provider","value","getIdTokenClaims","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","audience","push","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe3b7173.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","// src/components/NavBar.js\n\nimport React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <button onClick={() => loginWithRedirect({})}>Log in</button>\n      )}\n\n      {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n      {isAuthenticated && (\n      <span>\n        <Link to=\"/\">Home</Link>&nbsp;\n        <Link to=\"/profile\">Profile</Link>\n        <Link to=\"/external-api\">External API</Link>\n      </span>\n    )}\n    </div>\n  );\n};\n\nexport default NavBar;","// src/components/Profile.js\n\nimport React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <p>{user.user_id}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;\n","// src/utils/history.js\n\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","// src/components/PrivateRoute.js\n\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","// src/views/ExternalApi.js\n\nimport React, { useState } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst ExternalApi = () => {\n  const [showResult, setShowResult] = useState(false);\n  const [apiMessage, setApiMessage] = useState(\"\");\n  const { getTokenSilently } = useAuth0();\n\n  const callApi = async () => {\n    try {\n      const token = await getTokenSilently();\n\n      const response = await fetch(\"/exercise_templates\", {\n        \n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n        \n      });\n\n      const responseData = await response.json();\n\n      setShowResult(true);\n      setApiMessage(responseData);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <h1>External API</h1>\n      <button onClick={callApi}>Ping API</button>\n      {showResult && <code>{JSON.stringify(apiMessage, null, 2)}</code>}\n    </>\n  );\n};\n\nexport default ExternalApi;","// src/App.js\n\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\n//import { useAuth0 } from \"./react-auth0-spa\";\n\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport history from \"./utils/history\";\n\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport ExternalApi from \"./views/ExternalApi\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Don't forget to include the history module */}\n      <Router history={history}>\n        <header>\n          <NavBar />\n        </header>\n        <Switch>\n          <Route path=\"/\" exact />\n          <PrivateRoute path=\"/profile\" component={Profile} />\n          <PrivateRoute path=\"/external-api\" component={ExternalApi} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    audience={config.audience}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}